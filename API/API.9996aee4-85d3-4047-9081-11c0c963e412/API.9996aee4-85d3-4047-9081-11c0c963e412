{
  "apiDefinition" : {
    "info" : {
      "description" : "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
      "version" : "1.0.6",
      "title" : "Swagger Petstore",
      "termsOfService" : "http://swagger.io/terms/",
      "contact" : {
        "email" : "apiteam@swagger.io"
      },
      "license" : {
        "name" : "Apache 2.0",
        "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
      }
    },
    "basePath" : "",
    "serviceRegistryDisplayName" : "newPetStore_1",
    "tags" : [ {
      "name" : "pet",
      "description" : "Everything about your Pets",
      "externalDocs" : {
        "description" : "Find out more",
        "url" : "http://swagger.io"
      }
    }, {
      "name" : "store",
      "description" : "Access to Petstore orders"
    }, {
      "name" : "user",
      "description" : "Operations about user",
      "externalDocs" : {
        "description" : "Find out more about our store",
        "url" : "http://swagger.io"
      }
    } ],
    "schemes" : [ ],
    "security" : [ ],
    "paths" : {
      "/pet" : {
        "put" : {
          "tags" : [ "pet" ],
          "summary" : "Update an existing pet",
          "description" : "",
          "operationId" : "updatePet",
          "consumes" : [ "application/json", "application/xml" ],
          "produces" : [ "application/json", "application/xml" ],
          "parameters" : [ ],
          "responses" : {
            "400" : {
              "description" : "Invalid ID supplied",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Pet not found",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "405" : {
              "description" : "Validation exception",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "petstore_auth" : [ "write:pets", "read:pets" ]
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                },
                "examples" : { }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                },
                "examples" : { }
              }
            },
            "name" : "updatePet"
          }
        },
        "post" : {
          "tags" : [ "pet" ],
          "summary" : "Add a new pet to the store",
          "description" : "",
          "operationId" : "addPet",
          "consumes" : [ "application/json", "application/xml" ],
          "produces" : [ "application/json", "application/xml" ],
          "parameters" : [ ],
          "responses" : {
            "405" : {
              "description" : "Invalid input",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "petstore_auth" : [ "write:pets", "read:pets" ]
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                },
                "examples" : { }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                },
                "examples" : { }
              }
            },
            "name" : "addPet"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/pet",
        "enabled" : true
      },
      "/user/{username}" : {
        "get" : {
          "tags" : [ "user" ],
          "summary" : "Get user by user name",
          "description" : "",
          "operationId" : "getUserByName",
          "produces" : [ "application/json", "application/xml" ],
          "parameters" : [ {
            "name" : "username",
            "in" : "path",
            "description" : "The name that needs to be fetched. Use user1 for testing. ",
            "required" : true,
            "type" : "string",
            "parameterSchema" : {
              "type" : "string",
              "description" : "The name that needs to be fetched. Use user1 for testing. ",
              "readOnly" : false
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "examples" : { }
                },
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid username supplied",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "User not found",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ "access-get" ],
          "requestBody" : {
            "content" : { },
            "name" : "getUserByName"
          }
        },
        "put" : {
          "tags" : [ "user" ],
          "summary" : "Updated user",
          "description" : "This can only be done by the logged in user.",
          "operationId" : "updateUser",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json", "application/xml" ],
          "parameters" : [ {
            "name" : "username",
            "in" : "path",
            "description" : "name that need to be updated",
            "required" : true,
            "type" : "string",
            "parameterSchema" : {
              "type" : "string",
              "description" : "name that need to be updated",
              "readOnly" : false
            }
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid user supplied",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "User not found",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                },
                "examples" : { }
              }
            },
            "name" : "updateUser"
          }
        },
        "delete" : {
          "tags" : [ "user" ],
          "summary" : "Delete user",
          "description" : "This can only be done by the logged in user.",
          "operationId" : "deleteUser",
          "produces" : [ "application/json", "application/xml" ],
          "parameters" : [ {
            "name" : "username",
            "in" : "path",
            "description" : "The name that needs to be deleted",
            "required" : true,
            "type" : "string",
            "parameterSchema" : {
              "type" : "string",
              "description" : "The name that needs to be deleted",
              "readOnly" : false
            }
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid username supplied",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "User not found",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "deleteUser"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/user/{username}",
        "enabled" : true
      },
      "/pet/findByStatus" : {
        "get" : {
          "tags" : [ "pet" ],
          "summary" : "Finds Pets by status",
          "description" : "Multiple status values can be provided with comma separated strings",
          "operationId" : "findPetsByStatus",
          "produces" : [ "application/json", "application/xml" ],
          "parameters" : [ {
            "name" : "status",
            "in" : "query",
            "description" : "Status values that need to be considered for filter",
            "required" : true,
            "default" : "available",
            "parameterSchema" : {
              "type" : "array",
              "description" : "Status values that need to be considered for filter",
              "readOnly" : false,
              "items" : {
                "type" : "string",
                "default" : "available",
                "enum" : [ "available", "pending", "sold" ]
              }
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Pet\"}}"
                  },
                  "examples" : { }
                },
                "application/xml" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Pet\"}}"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid status value",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "petstore_auth" : [ "write:pets", "read:pets" ]
          } ],
          "enabled" : true,
          "scopes" : [ "access-get" ],
          "requestBody" : {
            "content" : { },
            "name" : "findPetsByStatus"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/pet/findByStatus",
        "enabled" : true
      },
      "/user/createWithList" : {
        "post" : {
          "tags" : [ "user" ],
          "summary" : "Creates list of users with given input array",
          "description" : "",
          "operationId" : "createUsersWithListInput",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json", "application/xml" ],
          "parameters" : [ ],
          "responses" : {
            "default" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "gateway",
                  "schema" : "{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/User\"}}"
                },
                "examples" : { }
              }
            },
            "name" : "createUsersWithListInput"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/user/createWithList",
        "enabled" : true
      },
      "/pet/{petId}/uploadImage" : {
        "post" : {
          "tags" : [ "pet" ],
          "summary" : "uploads an image",
          "description" : "",
          "operationId" : "uploadFile",
          "consumes" : [ "multipart/form-data" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "petId",
            "in" : "path",
            "description" : "ID of pet to update",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "parameterSchema" : {
              "type" : "integer",
              "description" : "ID of pet to update",
              "format" : "int64",
              "readOnly" : false
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApiResponse"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "petstore_auth" : [ "write:pets", "read:pets" ]
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "multipart/form-data" : {
                "schema" : {
                  "type" : "gateway",
                  "schema" : "{\"type\":\"object\",\"properties\":{\"additionalMetadata\":{\"type\":\"string\",\"description\":\"Additional data to pass to server\",\"readOnly\":false},\"file\":{\"type\":\"string\",\"description\":\"file to upload\",\"format\":\"binary\",\"readOnly\":false}}}"
                },
                "examples" : { }
              }
            },
            "name" : "uploadFile"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/pet/{petId}/uploadImage",
        "enabled" : true
      },
      "/store/inventory" : {
        "get" : {
          "tags" : [ "store" ],
          "summary" : "Returns pet inventories by status",
          "description" : "Returns a map of status codes to quantities",
          "operationId" : "getInventory",
          "produces" : [ "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{}"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "api_key" : [ ]
          } ],
          "enabled" : true,
          "scopes" : [ "access-get" ],
          "requestBody" : {
            "content" : { },
            "name" : "getInventory"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/store/inventory",
        "enabled" : true
      },
      "/user/login" : {
        "get" : {
          "tags" : [ "user" ],
          "summary" : "Logs user into the system",
          "description" : "",
          "operationId" : "loginUser",
          "produces" : [ "application/json", "application/xml" ],
          "parameters" : [ {
            "name" : "username",
            "in" : "query",
            "description" : "The user name for login",
            "required" : true,
            "type" : "string",
            "parameterSchema" : {
              "type" : "string",
              "description" : "The user name for login",
              "readOnly" : false
            }
          }, {
            "name" : "password",
            "in" : "query",
            "description" : "The password for login in clear text",
            "required" : true,
            "type" : "string",
            "parameterSchema" : {
              "type" : "string",
              "description" : "The password for login in clear text",
              "readOnly" : false
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : {
                "X-Expires-After" : {
                  "name" : "X-Expires-After",
                  "in" : "header",
                  "description" : "date in UTC when token expires",
                  "required" : false,
                  "type" : "string",
                  "format" : "date-time",
                  "examples" : { },
                  "parameterSchema" : {
                    "type" : "string",
                    "format" : "date-time"
                  }
                },
                "X-Rate-Limit" : {
                  "name" : "X-Rate-Limit",
                  "in" : "header",
                  "description" : "calls per hour allowed by the user",
                  "required" : false,
                  "type" : "integer",
                  "format" : "int32",
                  "examples" : { },
                  "parameterSchema" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"string\"}"
                  },
                  "examples" : { }
                },
                "application/xml" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"string\"}"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid username/password supplied",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ "access-get" ],
          "requestBody" : {
            "content" : { },
            "name" : "loginUser"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/user/login",
        "enabled" : true
      },
      "/user" : {
        "post" : {
          "tags" : [ "user" ],
          "summary" : "Create user",
          "description" : "This can only be done by the logged in user.",
          "operationId" : "createUser",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json", "application/xml" ],
          "parameters" : [ ],
          "responses" : {
            "default" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                },
                "examples" : { }
              }
            },
            "name" : "createUser"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/user",
        "enabled" : true
      },
      "/user/createWithArray" : {
        "post" : {
          "tags" : [ "user" ],
          "summary" : "Creates list of users with given input array",
          "description" : "",
          "operationId" : "createUsersWithArrayInput",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json", "application/xml" ],
          "parameters" : [ ],
          "responses" : {
            "default" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "gateway",
                  "schema" : "{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/User\"}}"
                },
                "examples" : { }
              }
            },
            "name" : "createUsersWithArrayInput"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/user/createWithArray",
        "enabled" : true
      },
      "/pet/findByTags" : {
        "get" : {
          "tags" : [ "pet" ],
          "summary" : "Finds Pets by tags",
          "description" : "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
          "operationId" : "findPetsByTags",
          "produces" : [ "application/json", "application/xml" ],
          "parameters" : [ {
            "name" : "tags",
            "in" : "query",
            "description" : "Tags to filter by",
            "required" : true,
            "parameterSchema" : {
              "type" : "array",
              "description" : "Tags to filter by",
              "readOnly" : false,
              "items" : {
                "type" : "string"
              }
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Pet\"}}"
                  },
                  "examples" : { }
                },
                "application/xml" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Pet\"}}"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid tag value",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "petstore_auth" : [ "write:pets", "read:pets" ]
          } ],
          "deprecated" : true,
          "enabled" : true,
          "scopes" : [ "access-get" ],
          "requestBody" : {
            "content" : { },
            "name" : "findPetsByTags"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/pet/findByTags",
        "enabled" : true
      },
      "/store/order" : {
        "post" : {
          "tags" : [ "store" ],
          "summary" : "Place an order for a pet",
          "description" : "",
          "operationId" : "placeOrder",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json", "application/xml" ],
          "parameters" : [ ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  },
                  "examples" : { }
                },
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid Order",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                },
                "examples" : { }
              }
            },
            "name" : "placeOrder"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/store/order",
        "enabled" : true
      },
      "/user/logout" : {
        "get" : {
          "tags" : [ "user" ],
          "summary" : "Logs out current logged in user session",
          "description" : "",
          "operationId" : "logoutUser",
          "produces" : [ "application/json", "application/xml" ],
          "parameters" : [ ],
          "responses" : {
            "default" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ "access-get" ],
          "requestBody" : {
            "content" : { },
            "name" : "logoutUser"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/user/logout",
        "enabled" : true
      },
      "/pet/{petId}" : {
        "get" : {
          "tags" : [ "pet" ],
          "summary" : "Find pet by ID",
          "description" : "Returns a single pet",
          "operationId" : "getPetById",
          "produces" : [ "application/json", "application/xml" ],
          "parameters" : [ {
            "name" : "petId",
            "in" : "path",
            "description" : "ID of pet to return",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "parameterSchema" : {
              "type" : "integer",
              "description" : "ID of pet to return",
              "format" : "int64",
              "readOnly" : false
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pet"
                  },
                  "examples" : { }
                },
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pet"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid ID supplied",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Pet not found",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "api_key" : [ ]
          } ],
          "enabled" : true,
          "scopes" : [ "access-get" ],
          "requestBody" : {
            "content" : { },
            "name" : "getPetById"
          }
        },
        "post" : {
          "tags" : [ "pet" ],
          "summary" : "Updates a pet in the store with form data",
          "description" : "",
          "operationId" : "updatePetWithForm",
          "consumes" : [ "application/x-www-form-urlencoded" ],
          "produces" : [ "application/json", "application/xml" ],
          "parameters" : [ {
            "name" : "petId",
            "in" : "path",
            "description" : "ID of pet that needs to be updated",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "parameterSchema" : {
              "type" : "integer",
              "description" : "ID of pet that needs to be updated",
              "format" : "int64",
              "readOnly" : false
            }
          } ],
          "responses" : {
            "405" : {
              "description" : "Invalid input",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "petstore_auth" : [ "write:pets", "read:pets" ]
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/x-www-form-urlencoded" : {
                "schema" : {
                  "type" : "gateway",
                  "schema" : "{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"description\":\"Updated name of the pet\",\"readOnly\":false},\"status\":{\"type\":\"string\",\"description\":\"Updated status of the pet\",\"readOnly\":false}}}"
                },
                "examples" : { }
              }
            },
            "name" : "updatePetWithForm"
          }
        },
        "delete" : {
          "tags" : [ "pet" ],
          "summary" : "Deletes a pet",
          "description" : "",
          "operationId" : "deletePet",
          "produces" : [ "application/json", "application/xml" ],
          "parameters" : [ {
            "name" : "api_key",
            "in" : "header",
            "required" : false,
            "type" : "string",
            "parameterSchema" : {
              "type" : "string",
              "readOnly" : false
            }
          }, {
            "name" : "petId",
            "in" : "path",
            "description" : "Pet id to delete",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "parameterSchema" : {
              "type" : "integer",
              "description" : "Pet id to delete",
              "format" : "int64",
              "readOnly" : false
            }
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid ID supplied",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Pet not found",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "petstore_auth" : [ "write:pets", "read:pets" ]
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "deletePet"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/pet/{petId}",
        "enabled" : true
      },
      "/store/order/{orderId}" : {
        "get" : {
          "tags" : [ "store" ],
          "summary" : "Find purchase order by ID",
          "description" : "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
          "operationId" : "getOrderById",
          "produces" : [ "application/json", "application/xml" ],
          "parameters" : [ {
            "name" : "orderId",
            "in" : "path",
            "description" : "ID of pet that needs to be fetched",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "parameterSchema" : {
              "maximum" : 10,
              "minimum" : 1,
              "type" : "integer",
              "description" : "ID of pet that needs to be fetched",
              "format" : "int64",
              "readOnly" : false
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  },
                  "examples" : { }
                },
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid ID supplied",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Order not found",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ "access-get" ],
          "requestBody" : {
            "content" : { },
            "name" : "getOrderById"
          }
        },
        "delete" : {
          "tags" : [ "store" ],
          "summary" : "Delete purchase order by ID",
          "description" : "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
          "operationId" : "deleteOrder",
          "produces" : [ "application/json", "application/xml" ],
          "parameters" : [ {
            "name" : "orderId",
            "in" : "path",
            "description" : "ID of the order that needs to be deleted",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "parameterSchema" : {
              "minimum" : 1,
              "type" : "integer",
              "description" : "ID of the order that needs to be deleted",
              "format" : "int64",
              "readOnly" : false
            }
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid ID supplied",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Order not found",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "deleteOrder"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/store/order/{orderId}",
        "enabled" : true
      }
    },
    "securityDefinitions" : {
      "api_key" : {
        "in" : "header",
        "name" : "api_key",
        "type" : "apiKey"
      },
      "petstore_auth" : {
        "authorizationUrl" : "https://petstore.swagger.io/oauth/authorize",
        "flow" : "implicit",
        "scopes" : {
          "read:pets" : "read your pets",
          "write:pets" : "modify pets in your account"
        },
        "type" : "oauth2"
      }
    },
    "definitions" : { },
    "parameters" : { },
    "baseUriParameters" : [ ],
    "externalDocs" : [ {
      "description" : "Find out more about Swagger",
      "url" : "http://swagger.io"
    } ],
    "servers" : [ {
      "url" : "https://petstore.swagger.io/v2",
      "variables" : { }
    }, {
      "url" : "http://petstore.swagger.io/v2",
      "variables" : { }
    } ],
    "components" : {
      "schemas" : {
        "Order" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"complete\":{\"type\":\"boolean\"},\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"petId\":{\"type\":\"integer\",\"format\":\"int64\"},\"quantity\":{\"type\":\"integer\",\"format\":\"int32\"},\"shipDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"status\":{\"type\":\"string\",\"description\":\"Order Status\",\"enum\":[\"placed\",\"approved\",\"delivered\"]}},\"xml\":{\"name\":\"Order\"}}"
        },
        "Category" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"name\":{\"type\":\"string\"}},\"xml\":{\"name\":\"Category\"}}"
        },
        "User" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"email\":{\"type\":\"string\"},\"firstName\":{\"type\":\"string\"},\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"lastName\":{\"type\":\"string\"},\"password\":{\"type\":\"string\"},\"phone\":{\"type\":\"string\"},\"userStatus\":{\"type\":\"integer\",\"description\":\"User Status\",\"format\":\"int32\"},\"username\":{\"type\":\"string\"}},\"xml\":{\"name\":\"User\"}}"
        },
        "Tag" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"name\":{\"type\":\"string\"}},\"xml\":{\"name\":\"Tag\"}}"
        },
        "ApiResponse" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"code\":{\"type\":\"integer\",\"format\":\"int32\"},\"message\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}}}"
        },
        "Pet" : {
          "type" : "gateway",
          "schema" : "{\"required\":[\"photoUrls\",\"name\"],\"type\":\"object\",\"properties\":{\"category\":{\"$ref\":\"#/components/schemas/Category\"},\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"name\":{\"type\":\"string\",\"example\":\"doggie\"},\"photoUrls\":{\"type\":\"array\",\"xml\":{\"wrapped\":true},\"items\":{\"type\":\"string\",\"xml\":{\"name\":\"photoUrl\"}}},\"status\":{\"type\":\"string\",\"description\":\"pet status in the store\",\"enum\":[\"available\",\"pending\",\"sold\"]},\"tags\":{\"type\":\"array\",\"xml\":{\"wrapped\":true},\"items\":{\"$ref\":\"#/components/schemas/Tag\",\"xml\":{\"name\":\"tag\"}}}},\"xml\":{\"name\":\"Pet\"}}"
        }
      },
      "responses" : { },
      "parameters" : { },
      "examples" : { },
      "requestBodies" : { },
      "headers" : { },
      "links" : { },
      "callbacks" : { }
    },
    "type" : "rest"
  },
  "nativeEndpoint" : [ {
    "passSecurityHeaders" : true,
    "uri" : "https://petstore.swagger.io/v2",
    "connectionTimeoutDuration" : 0,
    "alias" : false
  }, {
    "passSecurityHeaders" : true,
    "uri" : "http://petstore.swagger.io/v2",
    "connectionTimeoutDuration" : 0,
    "alias" : false
  } ],
  "apiName" : "newPetStore",
  "apiVersion" : "1",
  "apiDescription" : "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
  "maturityState" : "Beta",
  "isActive" : true,
  "type" : "REST",
  "owner" : "Administrator",
  "policies" : [ "f846ae3d-13b1-401e-bcf5-d3dfd37d7b67" ],
  "referencedFiles" : {
    "newPetStore" : "{\"swagger\":\"2.0\",\"info\":{\"description\":\"This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\",\"version\":\"1.0.6\",\"title\":\"Swagger Petstore\",\"termsOfService\":\"http://swagger.io/terms/\",\"contact\":{\"email\":\"apiteam@swagger.io\"},\"license\":{\"name\":\"Apache 2.0\",\"url\":\"http://www.apache.org/licenses/LICENSE-2.0.html\"}},\"host\":\"petstore.swagger.io\",\"basePath\":\"/v2\",\"tags\":[{\"name\":\"pet\",\"description\":\"Everything about your Pets\",\"externalDocs\":{\"description\":\"Find out more\",\"url\":\"http://swagger.io\"}},{\"name\":\"store\",\"description\":\"Access to Petstore orders\"},{\"name\":\"user\",\"description\":\"Operations about user\",\"externalDocs\":{\"description\":\"Find out more about our store\",\"url\":\"http://swagger.io\"}}],\"schemes\":[\"https\",\"http\"],\"paths\":{\"/pet/{petId}/uploadImage\":{\"post\":{\"tags\":[\"pet\"],\"summary\":\"uploads an image\",\"description\":\"\",\"operationId\":\"uploadFile\",\"consumes\":[\"multipart/form-data\"],\"produces\":[\"application/json\"],\"parameters\":[{\"name\":\"petId\",\"in\":\"path\",\"description\":\"ID of pet to update\",\"required\":true,\"type\":\"integer\",\"format\":\"int64\"},{\"name\":\"additionalMetadata\",\"in\":\"formData\",\"description\":\"Additional data to pass to server\",\"required\":false,\"type\":\"string\"},{\"name\":\"file\",\"in\":\"formData\",\"description\":\"file to upload\",\"required\":false,\"type\":\"file\"}],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"$ref\":\"#/definitions/ApiResponse\"}}},\"security\":[{\"petstore_auth\":[\"write:pets\",\"read:pets\"]}]}},\"/pet\":{\"post\":{\"tags\":[\"pet\"],\"summary\":\"Add a new pet to the store\",\"description\":\"\",\"operationId\":\"addPet\",\"consumes\":[\"application/json\",\"application/xml\"],\"produces\":[\"application/json\",\"application/xml\"],\"parameters\":[{\"in\":\"body\",\"name\":\"body\",\"description\":\"Pet object that needs to be added to the store\",\"required\":true,\"schema\":{\"$ref\":\"#/definitions/Pet\"}}],\"responses\":{\"405\":{\"description\":\"Invalid input\"}},\"security\":[{\"petstore_auth\":[\"write:pets\",\"read:pets\"]}]},\"put\":{\"tags\":[\"pet\"],\"summary\":\"Update an existing pet\",\"description\":\"\",\"operationId\":\"updatePet\",\"consumes\":[\"application/json\",\"application/xml\"],\"produces\":[\"application/json\",\"application/xml\"],\"parameters\":[{\"in\":\"body\",\"name\":\"body\",\"description\":\"Pet object that needs to be added to the store\",\"required\":true,\"schema\":{\"$ref\":\"#/definitions/Pet\"}}],\"responses\":{\"400\":{\"description\":\"Invalid ID supplied\"},\"404\":{\"description\":\"Pet not found\"},\"405\":{\"description\":\"Validation exception\"}},\"security\":[{\"petstore_auth\":[\"write:pets\",\"read:pets\"]}]}},\"/pet/findByStatus\":{\"get\":{\"tags\":[\"pet\"],\"summary\":\"Finds Pets by status\",\"description\":\"Multiple status values can be provided with comma separated strings\",\"operationId\":\"findPetsByStatus\",\"produces\":[\"application/json\",\"application/xml\"],\"parameters\":[{\"name\":\"status\",\"in\":\"query\",\"description\":\"Status values that need to be considered for filter\",\"required\":true,\"type\":\"array\",\"items\":{\"type\":\"string\",\"enum\":[\"available\",\"pending\",\"sold\"],\"default\":\"available\"},\"collectionFormat\":\"multi\"}],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Pet\"}}},\"400\":{\"description\":\"Invalid status value\"}},\"security\":[{\"petstore_auth\":[\"write:pets\",\"read:pets\"]}]}},\"/pet/findByTags\":{\"get\":{\"tags\":[\"pet\"],\"summary\":\"Finds Pets by tags\",\"description\":\"Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\",\"operationId\":\"findPetsByTags\",\"produces\":[\"application/json\",\"application/xml\"],\"parameters\":[{\"name\":\"tags\",\"in\":\"query\",\"description\":\"Tags to filter by\",\"required\":true,\"type\":\"array\",\"items\":{\"type\":\"string\"},\"collectionFormat\":\"multi\"}],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Pet\"}}},\"400\":{\"description\":\"Invalid tag value\"}},\"security\":[{\"petstore_auth\":[\"write:pets\",\"read:pets\"]}],\"deprecated\":true}},\"/pet/{petId}\":{\"get\":{\"tags\":[\"pet\"],\"summary\":\"Find pet by ID\",\"description\":\"Returns a single pet\",\"operationId\":\"getPetById\",\"produces\":[\"application/json\",\"application/xml\"],\"parameters\":[{\"name\":\"petId\",\"in\":\"path\",\"description\":\"ID of pet to return\",\"required\":true,\"type\":\"integer\",\"format\":\"int64\"}],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"$ref\":\"#/definitions/Pet\"}},\"400\":{\"description\":\"Invalid ID supplied\"},\"404\":{\"description\":\"Pet not found\"}},\"security\":[{\"api_key\":[]}]},\"post\":{\"tags\":[\"pet\"],\"summary\":\"Updates a pet in the store with form data\",\"description\":\"\",\"operationId\":\"updatePetWithForm\",\"consumes\":[\"application/x-www-form-urlencoded\"],\"produces\":[\"application/json\",\"application/xml\"],\"parameters\":[{\"name\":\"petId\",\"in\":\"path\",\"description\":\"ID of pet that needs to be updated\",\"required\":true,\"type\":\"integer\",\"format\":\"int64\"},{\"name\":\"name\",\"in\":\"formData\",\"description\":\"Updated name of the pet\",\"required\":false,\"type\":\"string\"},{\"name\":\"status\",\"in\":\"formData\",\"description\":\"Updated status of the pet\",\"required\":false,\"type\":\"string\"}],\"responses\":{\"405\":{\"description\":\"Invalid input\"}},\"security\":[{\"petstore_auth\":[\"write:pets\",\"read:pets\"]}]},\"delete\":{\"tags\":[\"pet\"],\"summary\":\"Deletes a pet\",\"description\":\"\",\"operationId\":\"deletePet\",\"produces\":[\"application/json\",\"application/xml\"],\"parameters\":[{\"name\":\"api_key\",\"in\":\"header\",\"required\":false,\"type\":\"string\"},{\"name\":\"petId\",\"in\":\"path\",\"description\":\"Pet id to delete\",\"required\":true,\"type\":\"integer\",\"format\":\"int64\"}],\"responses\":{\"400\":{\"description\":\"Invalid ID supplied\"},\"404\":{\"description\":\"Pet not found\"}},\"security\":[{\"petstore_auth\":[\"write:pets\",\"read:pets\"]}]}},\"/store/order\":{\"post\":{\"tags\":[\"store\"],\"summary\":\"Place an order for a pet\",\"description\":\"\",\"operationId\":\"placeOrder\",\"consumes\":[\"application/json\"],\"produces\":[\"application/json\",\"application/xml\"],\"parameters\":[{\"in\":\"body\",\"name\":\"body\",\"description\":\"order placed for purchasing the pet\",\"required\":true,\"schema\":{\"$ref\":\"#/definitions/Order\"}}],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"$ref\":\"#/definitions/Order\"}},\"400\":{\"description\":\"Invalid Order\"}}}},\"/store/order/{orderId}\":{\"get\":{\"tags\":[\"store\"],\"summary\":\"Find purchase order by ID\",\"description\":\"For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\",\"operationId\":\"getOrderById\",\"produces\":[\"application/json\",\"application/xml\"],\"parameters\":[{\"name\":\"orderId\",\"in\":\"path\",\"description\":\"ID of pet that needs to be fetched\",\"required\":true,\"type\":\"integer\",\"maximum\":10,\"minimum\":1,\"format\":\"int64\"}],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"$ref\":\"#/definitions/Order\"}},\"400\":{\"description\":\"Invalid ID supplied\"},\"404\":{\"description\":\"Order not found\"}}},\"delete\":{\"tags\":[\"store\"],\"summary\":\"Delete purchase order by ID\",\"description\":\"For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\",\"operationId\":\"deleteOrder\",\"produces\":[\"application/json\",\"application/xml\"],\"parameters\":[{\"name\":\"orderId\",\"in\":\"path\",\"description\":\"ID of the order that needs to be deleted\",\"required\":true,\"type\":\"integer\",\"minimum\":1,\"format\":\"int64\"}],\"responses\":{\"400\":{\"description\":\"Invalid ID supplied\"},\"404\":{\"description\":\"Order not found\"}}}},\"/store/inventory\":{\"get\":{\"tags\":[\"store\"],\"summary\":\"Returns pet inventories by status\",\"description\":\"Returns a map of status codes to quantities\",\"operationId\":\"getInventory\",\"produces\":[\"application/json\"],\"parameters\":[],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"type\":\"object\",\"additionalProperties\":{\"type\":\"integer\",\"format\":\"int32\"}}}},\"security\":[{\"api_key\":[]}]}},\"/user/createWithArray\":{\"post\":{\"tags\":[\"user\"],\"summary\":\"Creates list of users with given input array\",\"description\":\"\",\"operationId\":\"createUsersWithArrayInput\",\"consumes\":[\"application/json\"],\"produces\":[\"application/json\",\"application/xml\"],\"parameters\":[{\"in\":\"body\",\"name\":\"body\",\"description\":\"List of user object\",\"required\":true,\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/User\"}}}],\"responses\":{\"default\":{\"description\":\"successful operation\"}}}},\"/user/createWithList\":{\"post\":{\"tags\":[\"user\"],\"summary\":\"Creates list of users with given input array\",\"description\":\"\",\"operationId\":\"createUsersWithListInput\",\"consumes\":[\"application/json\"],\"produces\":[\"application/json\",\"application/xml\"],\"parameters\":[{\"in\":\"body\",\"name\":\"body\",\"description\":\"List of user object\",\"required\":true,\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/User\"}}}],\"responses\":{\"default\":{\"description\":\"successful operation\"}}}},\"/user/{username}\":{\"get\":{\"tags\":[\"user\"],\"summary\":\"Get user by user name\",\"description\":\"\",\"operationId\":\"getUserByName\",\"produces\":[\"application/json\",\"application/xml\"],\"parameters\":[{\"name\":\"username\",\"in\":\"path\",\"description\":\"The name that needs to be fetched. Use user1 for testing. \",\"required\":true,\"type\":\"string\"}],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"$ref\":\"#/definitions/User\"}},\"400\":{\"description\":\"Invalid username supplied\"},\"404\":{\"description\":\"User not found\"}}},\"put\":{\"tags\":[\"user\"],\"summary\":\"Updated user\",\"description\":\"This can only be done by the logged in user.\",\"operationId\":\"updateUser\",\"consumes\":[\"application/json\"],\"produces\":[\"application/json\",\"application/xml\"],\"parameters\":[{\"name\":\"username\",\"in\":\"path\",\"description\":\"name that need to be updated\",\"required\":true,\"type\":\"string\"},{\"in\":\"body\",\"name\":\"body\",\"description\":\"Updated user object\",\"required\":true,\"schema\":{\"$ref\":\"#/definitions/User\"}}],\"responses\":{\"400\":{\"description\":\"Invalid user supplied\"},\"404\":{\"description\":\"User not found\"}}},\"delete\":{\"tags\":[\"user\"],\"summary\":\"Delete user\",\"description\":\"This can only be done by the logged in user.\",\"operationId\":\"deleteUser\",\"produces\":[\"application/json\",\"application/xml\"],\"parameters\":[{\"name\":\"username\",\"in\":\"path\",\"description\":\"The name that needs to be deleted\",\"required\":true,\"type\":\"string\"}],\"responses\":{\"400\":{\"description\":\"Invalid username supplied\"},\"404\":{\"description\":\"User not found\"}}}},\"/user/login\":{\"get\":{\"tags\":[\"user\"],\"summary\":\"Logs user into the system\",\"description\":\"\",\"operationId\":\"loginUser\",\"produces\":[\"application/json\",\"application/xml\"],\"parameters\":[{\"name\":\"username\",\"in\":\"query\",\"description\":\"The user name for login\",\"required\":true,\"type\":\"string\"},{\"name\":\"password\",\"in\":\"query\",\"description\":\"The password for login in clear text\",\"required\":true,\"type\":\"string\"}],\"responses\":{\"200\":{\"description\":\"successful operation\",\"headers\":{\"X-Expires-After\":{\"type\":\"string\",\"format\":\"date-time\",\"description\":\"date in UTC when token expires\"},\"X-Rate-Limit\":{\"type\":\"integer\",\"format\":\"int32\",\"description\":\"calls per hour allowed by the user\"}},\"schema\":{\"type\":\"string\"}},\"400\":{\"description\":\"Invalid username/password supplied\"}}}},\"/user/logout\":{\"get\":{\"tags\":[\"user\"],\"summary\":\"Logs out current logged in user session\",\"description\":\"\",\"operationId\":\"logoutUser\",\"produces\":[\"application/json\",\"application/xml\"],\"parameters\":[],\"responses\":{\"default\":{\"description\":\"successful operation\"}}}},\"/user\":{\"post\":{\"tags\":[\"user\"],\"summary\":\"Create user\",\"description\":\"This can only be done by the logged in user.\",\"operationId\":\"createUser\",\"consumes\":[\"application/json\"],\"produces\":[\"application/json\",\"application/xml\"],\"parameters\":[{\"in\":\"body\",\"name\":\"body\",\"description\":\"Created user object\",\"required\":true,\"schema\":{\"$ref\":\"#/definitions/User\"}}],\"responses\":{\"default\":{\"description\":\"successful operation\"}}}}},\"securityDefinitions\":{\"api_key\":{\"type\":\"apiKey\",\"name\":\"api_key\",\"in\":\"header\"},\"petstore_auth\":{\"type\":\"oauth2\",\"authorizationUrl\":\"https://petstore.swagger.io/oauth/authorize\",\"flow\":\"implicit\",\"scopes\":{\"read:pets\":\"read your pets\",\"write:pets\":\"modify pets in your account\"}}},\"definitions\":{\"ApiResponse\":{\"type\":\"object\",\"properties\":{\"code\":{\"type\":\"integer\",\"format\":\"int32\"},\"type\":{\"type\":\"string\"},\"message\":{\"type\":\"string\"}}},\"Category\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"name\":{\"type\":\"string\"}},\"xml\":{\"name\":\"Category\"}},\"Pet\":{\"type\":\"object\",\"required\":[\"name\",\"photoUrls\"],\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"category\":{\"$ref\":\"#/definitions/Category\"},\"name\":{\"type\":\"string\",\"example\":\"doggie\"},\"photoUrls\":{\"type\":\"array\",\"xml\":{\"wrapped\":true},\"items\":{\"type\":\"string\",\"xml\":{\"name\":\"photoUrl\"}}},\"tags\":{\"type\":\"array\",\"xml\":{\"wrapped\":true},\"items\":{\"xml\":{\"name\":\"tag\"},\"$ref\":\"#/definitions/Tag\"}},\"status\":{\"type\":\"string\",\"description\":\"pet status in the store\",\"enum\":[\"available\",\"pending\",\"sold\"]}},\"xml\":{\"name\":\"Pet\"}},\"Tag\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"name\":{\"type\":\"string\"}},\"xml\":{\"name\":\"Tag\"}},\"Order\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"petId\":{\"type\":\"integer\",\"format\":\"int64\"},\"quantity\":{\"type\":\"integer\",\"format\":\"int32\"},\"shipDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"status\":{\"type\":\"string\",\"description\":\"Order Status\",\"enum\":[\"placed\",\"approved\",\"delivered\"]},\"complete\":{\"type\":\"boolean\"}},\"xml\":{\"name\":\"Order\"}},\"User\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"username\":{\"type\":\"string\"},\"firstName\":{\"type\":\"string\"},\"lastName\":{\"type\":\"string\"},\"email\":{\"type\":\"string\"},\"password\":{\"type\":\"string\"},\"phone\":{\"type\":\"string\"},\"userStatus\":{\"type\":\"integer\",\"format\":\"int32\",\"description\":\"User Status\"}},\"xml\":{\"name\":\"User\"}}},\"externalDocs\":{\"description\":\"Find out more about Swagger\",\"url\":\"http://swagger.io\"}}"
  },
  "tracingEnabled" : false,
  "scopes" : [ {
    "name" : "access-get",
    "description" : "",
    "oAuth2ScopeName" : "182aa82c-4cd0-45ef-a2d0-ae2a23121615",
    "policies" : [ "8006d555-85aa-4037-8374-0f30d6f956ee" ],
    "mashedUpAPI" : false
  } ],
  "publishedPortals" : [ ],
  "creationDate" : "2024-02-26 10:55:44 GMT",
  "lastModified" : "2024-03-02 15:27:13 GMT",
  "systemVersion" : 1,
  "gatewayEndpoints" : { },
  "id" : "9996aee4-85d3-4047-9081-11c0c963e412"
}